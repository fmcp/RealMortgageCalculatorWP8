<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>Real Mortgage Calculator</value>
  </data>
  <data name="AppBarButtonText" xml:space="preserve">
    <value>add</value>
  </data>
  <data name="AppBarMenuItemText" xml:space="preserve">
    <value>Menu element</value>
  </data>
  <data name="MainWelcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="Calculate" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="Sign" xml:space="preserve">
    <value>Sign</value>
  </data>
  <data name="EmailContent" xml:space="preserve">
    <value>Do you want to know how much you should be paying for your mortgage? Try  RealMortgageCalculator! www.twitter.com/rmcalc</value>
  </data>
  <data name="EmailSubject" xml:space="preserve">
    <value>Find out what you should pay for you mortgage</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="Url" xml:space="preserve">
    <value>www.twitter.com/rmcalc</value>
  </data>
  <data name="Manifest" xml:space="preserve">
    <value>This app has been made to release that nowadays it is used a simple interest to pay your mortgage where only is used what you pay in a year and it's paid monthly. Using complex interest, taking into account how much is paid monthly (how it should be), we will pay less money.</value>
  </data>
  <data name="CalculateTitle" xml:space="preserve">
    <value>Calculate interest</value>
  </data>
  <data name="AnnualInterest" xml:space="preserve">
    <value>Annual interest rate</value>
  </data>
  <data name="EmptyBoxesCaption" xml:space="preserve">
    <value>Error detected in input</value>
  </data>
  <data name="EmptyBoxesMessage" xml:space="preserve">
    <value>Some text box is empty</value>
  </data>
  <data name="InvertedCapital" xml:space="preserve">
    <value>Inverted capital</value>
  </data>
  <data name="NumberMonth" xml:space="preserve">
    <value>Number of months</value>
  </data>
  <data name="AmortizationChart" xml:space="preserve">
    <value>Amortization chart</value>
  </data>
  <data name="Results" xml:space="preserve">
    <value>Results</value>
  </data>
  <data name="Amortization" xml:space="preserve">
    <value>Amortization</value>
  </data>
  <data name="Debt" xml:space="preserve">
    <value>Debt</value>
  </data>
  <data name="loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="Month" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="MonthlyFee" xml:space="preserve">
    <value>Monthly fee:</value>
  </data>
  <data name="MonthlyFeeBank" xml:space="preserve">
    <value>Monthly bank fee:</value>
  </data>
  <data name="MonthlyInterest" xml:space="preserve">
    <value>Monthly interest:</value>
  </data>
  <data name="MonthlyInterestBank" xml:space="preserve">
    <value>Monthly bank interest:</value>
  </data>
  <data name="TotalPay" xml:space="preserve">
    <value>Total pay:</value>
  </data>
  <data name="YearInterestBank" xml:space="preserve">
    <value>Year interest bank:</value>
  </data>
  <data name="YearPay" xml:space="preserve">
    <value>Total paid in a year:</value>
  </data>
  <data name="NumberYears" xml:space="preserve">
    <value>Number of years</value>
  </data>
  <data name="Interest" xml:space="preserve">
    <value>Interest</value>
  </data>
  <data name="Charts" xml:space="preserve">
    <value>Charts</value>
  </data>
  <data name="GraphicTitle" xml:space="preserve">
    <value>Amortization and Interest fees</value>
  </data>
  <data name="Legend" xml:space="preserve">
    <value>Legend</value>
  </data>
</root>